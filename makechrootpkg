#!/bin/bash
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Most recent commit: Move build and package logs...

FORCE='n'
RUN=''
RUNAS=''
MAKEPKG_ARGS='-sr'
REPACK=''
COPY='copy'
WORKDIR=$PWD

update_first='0'
clean_first='0'
install_pkg=''
add_to_db=0
usetesting=0
makearch='x86_64'
chrootdir=''
maxqueue='4'

APPNAME=$(basename "${0}")
MUSER=$(echo $HOME | sed -e 's|/home/||')

trap rmlock 2 20

usage ()
{
	echo "usage ${APPNAME} [options] -r <chrootdir> [--] [makepkg args]"
	echo ' Run this script in a PKGBUILD dir to build a package inside a'
	echo ' clean chroot. All unrecognized arguments passed to this script'
	echo ' will be passed to makepkg.'
	echo ''
	echo ' The chroot dir consists of the following directories:'
	echo ' <chrootdir>/{root, copy} but only 'root' is required'
	echo ' by default. The working copy will be created as needed'
	echo ''
	echo 'The chroot 'root' directory must be created via the following'
	echo 'command:'
	echo '    mkarchroot <chrootdir>/root base base-devel sudo'
	echo ''
	echo "Default makepkg args: $MAKEPKG_ARGS"
	echo ''
	echo 'Flags:'
	echo '-h         This help'
	echo '-c         Clean the chroot before building'
	echo '-u         Update the working copy of the chroot before building'
	echo '           This is useful for rebuilds without dirtying the pristine'
	echo '           chroot'
	echo '-d         Add the package to a local db at /repo after building'
	echo '-t         Enable the testing repo'
	echo '-a <arch>  Specify the architecture to build for'
	echo '-r <dir>   The chroot dir to use'
	echo '-I <pkg>   Install a package into the working copy of the chroot'
	echo '-l <layer> The directory to use as the working copy of the chroot'
	echo '           Useful for maintain multiple copies. Default: copy'
	exit 1
}

rmlock() {
	rm -f $CHROOTLOCK
	while [ $maxqueue -ge 1 ]; do
		if [ ! -f /var/lock/queue${maxqueue} ]; then
			let maxqueue=maxqueue-1
		else
			rm -f /var/lock/queue${maxqueue}
			break
		fi
	done
}

while getopts 'hcudta:r:I:l:' arg; do
	case "${arg}" in
		h) usage ;;
		c) clean_first=1 ;;
		u) update_first=1 ;;
		d) add_to_db=1 ;;
		t) usetesting=1 ;;
		a) makearch="$OPTARG" ;;
		r) chrootdir="$OPTARG" ;;
		I) install_pkg="$OPTARG" ;;
		l) COPY="$OPTARG" ;;
		*) MAKEPKG_ARGS="$MAKEPKG_ARGS -$arg $OPTARG" ;;
	esac
done

# Pass all arguments after -- right to makepkg
MAKEPKG_ARGS="$MAKEPKG_ARGS ${*:$OPTIND}"

# See if -R was passed to makepkg
for arg in ${*:$OPTIND}; do
	if [ "$arg" = '-R' ]; then
		REPACK=1
		break;
	fi
done

if [ "$EUID" != '0' ]; then
	echo 'This script must be run as root.'
	exit 1
fi

if [ ! -f PKGBUILD ]; then
	echo 'This must be run in a directory containing a PKGBUILD.'
	exit 1
fi

if [ "$makearch" != 'i686' ] && [ "$makearch" != 'x86_64' ]; then
	echo "$makearch is not a valid architecture, defaulting to x86_64."
fi

counter=1
while [ $counter -le $maxqueue ]; do
	if [ -f /var/lock/queue${counter} ]; then
		let counter=counter+1
	else
		touch /var/lock/queue${counter}
		break
	fi
	if [ $counter -gt $maxqueue ]; then
		echo 'All queue slots are busy.'
		exit 0
	fi
done

[ "$makearch" == "i686" ] && RUNAS="linux32"

if [ "$usetesting" != '0' ]; then
	makearch="$makearch-testing"
fi

if [ "$chrootdir" = "" ]; then
	CHROOTLOCK="$HOME/chroots/.$makearch"
	chrootdir="$HOME/chroots/$makearch"
else
	chrootdir_orig="$chrootdir"
	CHROOTLOCK="$chrootdir_orig/.$makearch"
	chrootdir="$chrootdir_orig/$makearch"
fi

if [ ! -d "$chrootdir" ]; then
	echo "No chroot dir defined, or invalid path '$chrootdir'"
	rmlock
	exit 1
fi

if [ ! -d "$chrootdir/root" ]; then
	echo 'Missing chroot dir root directory.'
	echo "Try using: mkarchroot $chrootdir/root base base-devel sudo"
	rmlock
	usage
fi

if [ -f "$CHROOTLOCK" ]; then
	echo "Chroot $makearch is currently in use."
	echo "If you are sure it is not in use, please remove the lockfile"
	echo "($CHROOTLOCK)"
	exit 1
fi

#Get rid of trailing / in chrootdir
[ "$chrootdir" != "/" ] && chrootdir=$(echo $chrootdir | sed 's#/$##')
copydir="$chrootdir/$COPY"

echo "Building in chroot $chrootdir"

umask 0022
if [ ! -d "$copydir" -o "$clean_first" -eq "1" ]; then
	echo -n 'creating clean working copy...'
	mkdir -p "$copydir"
	rsync -a --delete -q -W -x "$chrootdir/root/" "$copydir"
	echo 'done'
fi

if [ -n "$install_pkg" ]; then
	pkgname="$(basename "$install_pkg")"
	cp "$install_pkg" "$copydir/$pkgname"
	$RUNAS mkarchroot -r "pacman -U /$pkgname" "$copydir"
	ret=$?
	rm "$copydir/$pkgname"
	#exit early, we've done all we need to
	exit $ret
fi

if [ $update_first -eq 1 ]; then
	$RUNAS mkarchroot -r 'pacman -Syu --noconfirm' "$copydir"
fi

[ -d "$copydir/build" ] || mkdir "$copydir/build"

if [ "$REPACK" != "1" ]; then
	#Remove anything in there UNLESS -R (repack) was passed to makepkg
	rm -rf "$copydir/build/"*
fi

# Get SRC/PKGDEST from makepkg.conf
#if [ -f ~/.makepkg.conf ]; then
#	SRCDEST=$(grep '^SRCDEST=' ~/.makepkg.conf | cut -d= -f2)
#	PKGDEST=$(grep '^PKGDEST=' ~/.makepkg.conf | cut -d= -f2)
#fi
[ -z ${SRCDEST} ] && SRCDEST=$(grep '^SRCDEST=' /etc/makepkg.conf | cut -d= -f2)
[ -z ${PKGDEST} ] && PKGDEST=$(grep '^PKGDEST=' /etc/makepkg.conf | cut -d= -f2)

[ -d "$copydir/pkgdest" ] || mkdir "$copydir/pkgdest"
if ! grep 'PKGDEST=/pkgdest' "$copydir/etc/makepkg.conf" >/dev/null 2>&1; then
	echo 'PKGDEST=/pkgdest' >> "$copydir/etc/makepkg.conf"
fi

[ -d "$copydir/srcdest" ] || mkdir "$copydir/srcdest"
if ! grep 'SRCDEST=/srcdest' "$copydir/etc/makepkg.conf" >/dev/null 2>&1; then
	echo 'SRCDEST=/srcdest' >> "$copydir/etc/makepkg.conf"
fi

if [ -f "$HOME/.packager" ]; then
	sed -i "s|PKGBUILD.com Build Server|$(head -n1 $HOME/.packager | sed s/\"//g)|" $copydir/etc/makepkg.conf
fi

# Set target CARCH as it might be used withing the PKGBUILD to select correct sources
CARCH=$(eval $(grep '^CARCH=' "$copydir/etc/makepkg.conf"))
# Copy PKGBUILD and sources
source PKGBUILD
cp PKGBUILD "$copydir/build/"
for f in ${source[@]}; do
	basef=$(echo $f | sed 's|::.*||' | sed 's|^.*://.*/||g')
	if [ -f "$basef" ]; then
		cp "$basef" "$copydir/srcdest/"
	elif [ -f "$SRCDEST/$basef" ]; then
		cp "$SRCDEST/$basef" "$copydir/srcdest/"
	fi
done

for i in 'changelog' 'install'; do
	filelist=$(sed -n "s/^[[:space:]]*$i=//p" PKGBUILD)
	for file in $filelist; do
		# Evaluate any bash variables used
		eval file=${file}
		if [[ -f "$file" ]]; then
			cp "$file" "$copydir/build/"
		fi
	done
done

chown -R nobody "$copydir/build"
chown -R nobody "$copydir/srcdest"
chown -R nobody "$copydir/pkgdest"

if ! grep "^nobody" "$copydir/etc/sudoers" >/dev/null 2>&1; then
	touch "$copydir/etc/sudoers"
	echo 'nobody	ALL=(ALL) NOPASSWD: ALL' >> "$copydir/etc/sudoers"
	chmod 440 "$copydir/etc/sudoers"
fi

#This is a little gross, but this way the script is recreated every time in the
#working copy
(cat <<EOF
#!/bin/bash
export LANG=$LOCALE
cd /build
export HOME=/build
sudo -u nobody $RUNAS makepkg $MAKEPKG_ARGS || touch BUILD_FAILED
[ -f BUILD_FAILED ] && exit 1
which namcap &>/dev/null && namcap /build/PKGBUILD /pkgdest/*.pkg.tar.* > /build/namcap.log
exit 0
EOF
) > "$copydir/chrootbuild"
chmod +x "$copydir/chrootbuild"

if $RUNAS mkarchroot -r "/chrootbuild" "$copydir"; then
	for pkgfile in "${copydir}"/pkgdest/*.pkg.tar.*; do
		[ -e "$pkgfile" ] || continue
		if [ "$add_to_db" -eq "1" ]; then
			mkdir -p "${copydir}/repo" >/dev/null
			pushd "${copydir}/repo" >/dev/null
			cp "$pkgfile" .
			repo-add repo.db.tar.gz "$(basename "$pkgfile")"
			popd >/dev/null
		fi

		if [ -d "$PKGDEST" ]; then
			mv "$pkgfile" "${PKGDEST}"
		else
			mv "$pkgfile" "${WORKDIR}"
		fi
	 done

	for l in "${copydir}"/build/{namcap,*-{build,package}}.log; do
		[ -f "$l" ] && mv "$l" "${WORKDIR}"
	done
	chown -R "$MUSER:dev" "${WORKDIR}"
else
	#just in case. We returned 1, make sure we fail
	touch "${copydir}/build/BUILD_FAILED"
fi

for f in "${copydir}"/srcdest/*; do
	[ -e "$f" ] || continue
	if [ -d "$SRCDEST" ]; then
		rsync -r "$f" "${SRCDEST}"
	else
		rsync -r "$f" "${WORKDIR}"
	fi
done

rmlock

if [ -e "${copydir}/build/BUILD_FAILED" ]; then
	echo "Build failed, check ${copydir}/build"
	rm "${copydir}/build/BUILD_FAILED"
	exit 1
else
	rm -rf "${copydir}"/build/*
fi	

exit 0
