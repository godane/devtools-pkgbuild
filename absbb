#!/bin/bash

if [ "$EUID" != "0" ]; then
	echo 'This script must be run as root.'
	exit 1
fi

# Source makepkg.conf; fail if it is not found
if [ -f "$HOME/.makepkg.conf" ]; then
	source "$HOME/.makepkg.conf"
elif [ -f '/etc/makepkg.conf' ]; then
	source '/etc/makepkg.conf'
else
	echo 'No makepkg.conf found!'
	exit 1
fi

if [ -f "$HOME/.abs.conf" ]; then
	source "$HOME/.abs.conf"
elif [ -f '/etc/abs.conf' ]; then
	source '/etc/abs.conf'
else
	echo 'No abs.conf found'
	exit 1
fi

if [ -f "$HOME/.absbb.conf" ]; then
	source "$HOME/.absbb.conf"
elif [ -f '/etc/absbb.conf' ]; then
	source '/etc/absbb.conf'
else
	echo 'No absbb.conf found.'
fi

work="work"
pkgdest="${work}/pkgdest"
srcdest="${work}/srcdest"
buildlogs="${work}/logs"
repodest="${work}/repodest"

PKGLIST="$2"

trap rmlock 2 20

usage () {
	echo -e "Archlinux build bot tool\n
\033[1mUsage: \033[0m `basename $0` [command] pkg.list
\033[1mCommands: \033[0m\n
  usage                   Print this short usage and command list.
  extra-i686-build        Build chroot extra i686.
  extra-x86_64-build      Build chroot extra x86_64.
  testing-i686-build      Build chroot testing i686.
  testing-x86_64-build    Build chroot testing x86_64.
  staging-i686-build      Build chroot staging i686.
  staging-x86_64-build    Build chroot staging x86_64.
  multilib-build          Build chroot multilib. (x86_64 only)"
  exit 1
}

maxqueue='4'
rmlock() {
	#rm -f $CHROOTLOCK
	while [ $maxqueue -ge 1 ]; do
		if [ ! -f /var/lock/queue${maxqueue} ]; then
			let maxqueue=maxqueue-1
		else
			rm -f /var/lock/queue${maxqueue}
			break
		fi
	done
}

counter=1
while [ $counter -le $maxqueue ]; do
	if [ -f /var/lock/queue${counter} ]; then
		let counter=counter+1
	else
		touch /var/lock/queue${counter}
		break
	fi
	if [ $counter -gt $maxqueue ]; then
		echo 'All queue slots are busy.'
		exit 0
	fi
done


chroot_mount () {
	local chrootdir=$1
	[ -d "${HOME_PKGS}" ] || mkdir -p "${HOME_PKGS}"
	[ -d "${chrootdir}/${pkgdest}" ] || mkdir -p "${chrootdir}/${pkgdest}"
	mount -o bind "${HOME_PKGS}" "${chrootdir}/${pkgdest}"
	[ -d "${HOME_SOURCES}" ] || mkdir -p "${HOME_SOURCES}"
	[ -d "${chrootdir}/${srcdest}" ] || mkdir -p "${chrootdir}/${srcdest}"
	mount -o bind "${HOME_SOURCES}" "${chrootdir}/${srcdest}" 
	[ -d "${HOME_REPO}" ] || mkdir -p "${HOME_REPO}"
	[ -d "${chrootdir}/${repodest}" ] || mkdir -p "${chrootdir}/${repodest}"
	mount -o bind "${HOME_REPO}" "${chrootdir}/${repodest}"
	[ -d "${HOME_LOGS}" ] || mkdir -p "${HOME_LOGS}"
	[ -d "${chrootdir}/${buildlogs}" ] || mkdir -p "${chrootdir}/${buildlogs}"
	mount -o bind "${HOME_LOGS}" "${chrootdir}/${buildlogs}" 
	
	trap "chroot_umount ${chrootdir}" 0 1 2 15
}

chroot_umount () {
	local chrootdir=$1
	umount "${chrootdir}/${pkgdest}"
	umount "${chrootdir}/${srcdest}"
	umount "${chrootdir}/${repodest}"
	umount "${chrootdir}/${buildlogs}"
}

mkchrootpkg () {
	local chrootdir="${1}"
	local makearch="${2}"
	local pkglist="${3}"
	local build="${work}/build"
	local pkgbuild="${work}/pkgbuild"
	
	if [ ! -d "$chrootdir" ]; then
		echo "No chroot dir defined, or invalid path '$chrootdir'"
		rmlock
		exit 1
	fi
	
	[ -d ${chrootdir}/${pkgdest} ] || mkdir -p ${chrootdir}/${pkgdest}
	[ -d ${chrootdir}/${srcdest} ] || mkdir -p ${chrootdir}/${srcdest}
	[ -d ${chrootdir}/${build} ] || mkdir -p ${chrootdir}/${build}
	[ -d ${chrootdir}/${buildlogs} ] || mkdir -p ${chrootdir}/${buildlogs}
	[ -d ${chrootdir}/${pkgbuild} ] || mkdir -p ${chrootdir}/${pkgbuild}
	[ -d ${chrootdir}/${repodest} ] || mkdir -p ${chrootdir}/${repodest}
	
	if [ -f "${pkglist}" ]; then
		cat "${pkglist}" | grep -v "#" | while read pkg; do
			pkg1="$ABSROOT*/${pkg}"
			package="$(find ${pkg1} -type d)"
			if [ -d "${package}" ]; then
				echo "${package}"
				cp -af "${package}" "${chrootdir}/${pkgbuild}"
			fi
		done
	else
		echo "No $pkglist file found."
		exit 1
	fi

	[ -z ${SRCDEST} ] && SRCDEST=$(grep '^SRCDEST=' /etc/makepkg.conf | cut -d= -f2)
	[ -z ${PKGDEST} ] && PKGDEST=$(grep '^PKGDEST=' /etc/makepkg.conf | cut -d= -f2)

	[ -d "${chrootdir}/${pkgdest}" ] || mkdir "${chrootdir}/${pkgdest}"
	if ! grep "PKGDEST=/${pkgdest}" "${chrootdir}/etc/makepkg.conf" >/dev/null 2>&1; then
		echo "PKGDEST=/${pkgdest}" >> "${chrootdir}/etc/makepkg.conf"
	fi

	[ -d "${chrootdir}/${srcdest}" ] || mkdir "${chrootdir}/${srcdest}"
	if ! grep "SRCDEST=/${srcdest}" "${chrootdir}/etc/makepkg.conf" >/dev/null 2>&1; then
		echo "SRCDEST=/${srcdest}" >> "${chrootdir}/etc/makepkg.conf"
	fi

	# Set target CARCH as it might be used withing the PKGBUILD to select correct sources
	CARCH=$(eval $(grep '^CARCH=' "${chrootdir}/etc/makepkg.conf"))

	chown -R nobody "${chrootdir}/${work}"

	if ! grep "^nobody" "${chrootdir}/etc/sudoers" >/dev/null 2>&1; then
		touch "${chrootdir}/etc/sudoers"
		echo 'nobody	ALL=(ALL) NOPASSWD: ALL' >> "${chrootdir}/etc/sudoers"
		chmod 440 "${chrootdir}/etc/sudoers"
	fi

	
(cat <<EOF
%DATABASE%
$USER-repo.db.tar.gz

%REPO_DIR%
/$repodest

%BUILD_DIR%
/$build

%MAKEPKG_ARGS%
$MKPKG_ARGS

%LOCAL_PKGS%
EOF
) > "${chrootdir}/${work}/REPOBUILD"

if [ -f "${pkglist}" ]; then
	cat "${pkglist}" | grep -v "#" | while read pkgpath; do
		echo "/${pkgbuild}/${pkgpath}" >> "${chrootdir}/${work}/REPOBUILD"
	done
fi

#This is a little gross, but this way the script is recreated every time in the
#working copy
(cat <<EOF
#!/bin/bash
export LANG=$LANG
cd /$work
export HOME=/$work
if [ -d /$repodest ]; then
	rm -R /$repodest/*
fi
if [ -d /$build ]; then
	rm -R /$build/*
fi
sudo -u nobody makerepo || touch BUILD_FAILED
[ -f BUILD_FAILED ] && exit 1
EOF
) > "${chrootdir}/chrootbuild"
	
if [ -f "${pkglist}" ]; then
	cat "${pkglist}" | grep -v "#" | while read pkg; do
		echo "which namcap &>/dev/null && namcap /$build/$pkg/PKGBUILD /$pkgdest/$pkg-*.pkg.tar.* > /$buildlogs/$pkg-namcap.log" >> "${chrootdir}/chrootbuild"
	done
fi

echo "exit 0" >> "${chrootdir}/chrootbuild"
chmod +x "${chrootdir}/chrootbuild"

}

#archbuild
archbuild () {
	local cmd="${1%-build}"
	local pkglist="${2}"
	
	if [ "${cmd}" == 'multilib' ]; then
		repo='multilib'
		arch='x86_64'
	else
		repo=${cmd%-*}
		arch=${cmd#*-}
	fi
	chroots="${CHROOT_BASE_DIR}"
	clean_first=false
	
	while getopts 'cr:' arg; do
		case "${arg}" in
			c) clean_first=true ;;
			r) chroots="$OPTARG" ;;
			*) 	echo 'archbuild:'
				echo '    -c         Recreate the chroot before building'
				echo '    -r <dir>   Create chroots in this directory' ;;
		esac
	done
	
	if [ "$(uname -m)" == 'i686' -a "${arch}" != 'i686' ]; then
		echo 'You can only build i686 packages on this system'
		exit 1
	fi

	if [ "$(uname -m)" != 'x86_64' -a "${repo}" == 'multilib' ]; then
		echo 'You can only build multilib packages on a x86_64 system'
		exit 1
	fi

	[ "$arch" == "i686" ] && RUNAS="linux32"
	
	if ${clean_first} || [ ! -d "${chroots}/${repo}-${arch}" ]; then
		echo "Creating chroot for [${repo}] (${arch})..."
		sudo rm -rf ${chroots}/${repo}-${arch}
		sudo mkdir -p ${chroots}/${repo}-${arch}
		setarch ${arch} sudo mkarchroot \
			-C /usr/share/devtools/pacman-${repo}.conf \
			-M /usr/share/devtools/makepkg-${arch}.conf \
			${chroots}/${repo}-${arch}/root \
			base base-devel sudo namcap abs perl-xyne-arch makerepo
	fi
	
	if [ -f /usr/share/devtools/mirrorlist ]; then
		cp -f "/usr/share/devtools/mirrorlist" "${chroots}/${repo}-${arch}/root/etc/pacman.d"
	fi
	
	chroot_mount ${chroots}/${repo}-${arch}/root
	mkchrootpkg "${chroots}/${repo}-${arch}/root" "${arch}" "${pkglist}"
	echo "Building in chroot for [${repo}] (${arch})..."
	setarch ${arch} mkarchroot -r "/chrootbuild" "${chroots}/${repo}-${arch}/root"
}

ACTION=$1
case "$ACTION" in
	extra-i686-build)
		archbuild extra-i686-build ${PKGLIST} ;;
	extra-x86_64-build)
		archbuild extra-x86_64-build ${PKGLIST} ;;
	testing-i686-build)
		archbuild testing-i686-build ${PKGLIST} ;;
	testing-x86_64-build)
		archbuild testing-x86_64-build ${PKGLIST} ;;
	staging-i686-build)
		archbuild staging-i686-build ${PKGLIST} ;;
	staging-x86_64-build)
		archbuild staging-x86_64-build ${PKGLIST} ;;
	multilib-build)
		archbuild multilib-build ${PKGLIST} ;;
	*)
		usage ;;
esac

rmlock

exit 0
